-- Drop tables if they already exist (optional cleanup)
DROP TABLE emps CASCADE CONSTRAINTS;
DROP TABLE dept CASCADE CONSTRAINTS;

-- Create DEPT table
CREATE TABLE dept (
    deptno NUMBER(4) PRIMARY KEY,
    dname  VARCHAR2(20),
    loc    VARCHAR2(20)
);

-- Create EMPS table
CREATE TABLE emps (
    empno   NUMBER(4) PRIMARY KEY,
    ename   VARCHAR2(20),
    job     VARCHAR2(20),
    sal     NUMBER(10,2),
    deptno  NUMBER(4),
    CONSTRAINT fk_dept FOREIGN KEY (deptno) REFERENCES dept(deptno)
);
-- Insert Departments
INSERT INTO dept VALUES (10, 'ACCOUNTING', 'NEW YORK');
INSERT INTO dept VALUES (20, 'RESEARCH', 'DALLAS');
INSERT INTO dept VALUES (30, 'SALES', 'CHICAGO');
INSERT INTO dept VALUES (40, 'OPERATIONS', 'BOSTON');

-- Insert Employees
INSERT INTO emps VALUES (7839, 'KING', 'PRESIDENT', 5000, 10);
INSERT INTO emps VALUES (7566, 'JONES', 'MANAGER', 2975, 20);
INSERT INTO emps VALUES (7698, 'BLAKE', 'MANAGER', 2850, 30);
INSERT INTO emps VALUES (7782, 'CLARK', 'MANAGER', 2450, 10);
INSERT INTO emps VALUES (7788, 'SCOTT', 'ANALYST', 3000, 20);
INSERT INTO emps VALUES (7902, 'FORD', 'ANALYST', 3000, 20);
INSERT INTO emps VALUES (7844, 'TURNER', 'SALESMAN', 1500, 30);
INSERT INTO emps VALUES (7900, 'JAMES', 'CLERK', 950, 30);
INSERT INTO emps VALUES (7654, 'MARTIN', 'SALESMAN', 1250, 30);
INSERT INTO emps VALUES (7499, 'ALLEN', 'SALESMAN', 1600, 30);
INSERT INTO emps VALUES (7934, 'MILLER', 'CLERK', 1300, 10);
COMMIT;

--Subqueries-Validate All Given Queries
--Employees earning more than average salary
SELECT ename, sal 
FROM emps 
WHERE sal > (SELECT AVG(sal) FROM emps);

--Employees in departments located in NEW YORK
SELECT ename, deptno 
FROM emps 
WHERE deptno IN (SELECT deptno FROM dept WHERE loc = 'NEW YORK');

--Employees having same job and deptno as employee 7839
SELECT empno, ename, job, deptno
FROM emps
WHERE (job, deptno) IN (SELECT job, deptno FROM emps WHERE empno = 7839);

--Employees earning more than avg salary of their dept
SELECT e.ename, e.sal, e.deptno
FROM emps e
WHERE e.sal > (SELECT AVG(sal) FROM emps WHERE deptno = e.deptno);

--Employees working in CHICAGO
SELECT * 
FROM emps 
WHERE deptno IN (SELECT deptno FROM dept WHERE loc = 'CHICAGO');

--Departments whose average salary > overall average salary
SELECT deptno, AVG(sal) AS avg_sal
FROM emps
GROUP BY deptno
HAVING AVG(sal) > (SELECT AVG(sal) FROM emps);

--Employees with their department names
SELECT e.ename,
(SELECT d.dname FROM dept d WHERE d.deptno = e.deptno) AS department
FROM emps e;

--Update salaries of employees in SALES department (10% hike)
UPDATE emps 
SET sal = sal * 1.1 
WHERE deptno = (SELECT deptno FROM dept WHERE dname = 'SALES');
COMMIT;

--Display employee names with their department names
SELECT e.ename, d.dname
FROM emps e
JOIN dept d ON e.deptno = d.deptno;

--List all employees with their job titles and department location
SELECT e.ename, e.job, d.loc
FROM emps e
JOIN dept d ON e.deptno = d.deptno;

--Display employees who work in SALES department
SELECT e.ename, e.job, e.sal
FROM emps e
JOIN dept d ON e.deptno = d.deptno
WHERE d.dname = 'SALES';

--List all employees with department name and location, including departments with no employees
SELECT e.ename, d.dname, d.loc
FROM dept d
LEFT JOIN emps e ON e.deptno = d.deptno;

--Display all departments and employees, even if employee has no dept assigned
SELECT e.ename, d.dname, d.loc
FROM emps e
FULL OUTER JOIN dept d ON e.deptno = d.deptno;

--Each department name and total salary paid
SELECT d.dname, SUM(e.sal) AS total_salary
FROM dept d
JOIN emps e ON d.deptno = e.deptno
GROUP BY d.dname;

--Departments having more than 3 employees
SELECT d.dname, COUNT(e.empno) AS num_employees
FROM dept d
JOIN emps e ON d.deptno = e.deptno
GROUP BY d.dname
HAVING COUNT(e.empno) > 3;

--Employees working in same location as ACCOUNTING dept
SELECT e.ename, e.job, e.deptno
FROM emps e
WHERE e.deptno IN (
  SELECT deptno FROM dept 
  WHERE loc = (SELECT loc FROM dept WHERE dname = 'ACCOUNTING')
);

--For each department, employee with highest salary
SELECT e.deptno, e.ename, e.sal
FROM emps e
WHERE e.sal = (
  SELECT MAX(sal) FROM emps WHERE deptno = e.deptno
);

--Employees whose salary > avg salary of their dept
SELECT e.ename, e.sal, e.deptno
FROM emps e
WHERE e.sal > (SELECT AVG(sal) FROM emps WHERE deptno = e.deptno);

BEGIN
   DBMS_OUTPUT.PUT_LINE('Welcome to PL/SQL!');
END;

DECLARE
     v_uname VARCHAR2(20)  :=  'Vaishu';
BEGIN
    DBMS_OUTPUT.PUT_LINE('Hi ' || v_uname || ', Good morning...!');        
END;

DECLARE
   v_count NUMBER;
BEGIN
   SELECT COUNT(*) INTO v_count FROM emps;
   DBMS_OUTPUT.PUT_LINE('Total emps: ' || v_count);
END;

DECLARE
   v_sal NUMBER;
BEGIN
   SELECT sal INTO v_sal FROM emps WHERE empno = 7900;
   IF v_sal > 3000 THEN
      DBMS_OUTPUT.PUT_LINE('High sal employee');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Normal sal employee');
   END IF;
END;

--- Example 5:   Exception  Handling for Data Validation
-- WITHOUT Exception block 
DECLARE
   v_dept emps.deptno%TYPE;
BEGIN
   SELECT deptno INTO v_dept FROM emps WHERE empno  = 7900;
   DBMS_OUTPUT.PUT_LINE('Department Number : ' || v_dept);
END;

-- WITH Exception block  
DECLARE
   v_dept emps.deptno%TYPE;
BEGIN
   SELECT deptno INTO v_dept FROM emps WHERE empno  = 9999;
   DBMS_OUTPUT.PUT_LINE('Department Number : ' || v_dept);
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No such employee found!');
END;

--- Example6:   Working with attributes in PL/SQL --  TYPE
DECLARE
   v_dept emps.deptno%TYPE;
BEGIN
   SELECT deptno INTO v_dept FROM emps WHERE empno  = 7900;
   DBMS_OUTPUT.PUT_LINE('Department Number : ' || v_dept);
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No such employee found!');
END;

--- Example7:   Working with attributes in PL/SQL --  ROWTYPE
DECLARE
   emp_record emps%ROWTYPE;
BEGIN
   SELECT * INTO emp_record  FROM emps  WHERE empno = 7788;
   DBMS_OUTPUT.PUT_LINE('Name: ' || emp_record.ename || ', Job :  ' || emp_record.job);
END;

-- Example-1: Create an array to store salaries and keys are Integer 
    DECLARE
       -- Step 1: Define an associative array type
       TYPE salary_table IS TABLE OF NUMBER
          INDEX BY PLS_INTEGER;
    
       -- Step 2: Declare a variable of that type
       emp_salaries salary_table;
    
    BEGIN
       -- Step 3: Assign values
       emp_salaries(100) := 5000;
       emp_salaries(101) := 6000;
       emp_salaries(102) := 5500;
    
       -- Step 4: Access values
       DBMS_OUTPUT.PUT_LINE('Salary of Emp 100: ' || emp_salaries(100));
    END;

--  Example:2  --  String based keys
DECLARE
  TYPE t_employee IS TABLE OF NUMBER
    INDEX BY VARCHAR2(50);

  v_salary t_employee;
BEGIN
  v_salary('Alice') := 50000;
  v_salary('Bob')   := 60000;
  v_salary('Eve')   := 55000;

  DBMS_OUTPUT.PUT_LINE('Salary of Eve: ' || v_salary('Eve'));
END;

-- Example:3 One more example on  String based Keys
DECLARE
  TYPE t_country_capital IS TABLE OF VARCHAR2(50)
    INDEX BY VARCHAR2(50);

  v_capitals t_country_capital;
  v_key VARCHAR2(50);
BEGIN
  v_capitals('USA') := 'Washington';
  v_capitals('France') := 'Paris';
  v_capitals('Japan') := 'Tokyo';
  v_key := v_capitals.FIRST;

  WHILE v_key IS NOT NULL LOOP
    DBMS_OUTPUT.PUT_LINE(v_key || ' → ' || v_capitals(v_key));
    v_key := v_capitals.NEXT(v_key);
  END LOOP;
END;

-- Example-4: Create an array to store salaries and keys are Integer, Array Iteration

    DECLARE
       -- Step 1: Define an associative array type
       TYPE salary_table IS TABLE OF NUMBER
          INDEX BY PLS_INTEGER;
    
       -- Step 2: Declare a variable of that type
       emp_salaries salary_table;
       v_key PLS_INTEGER;
    
    BEGIN
       -- Step 3: Assign values
       emp_salaries(100) := 5000;
       emp_salaries(101) := 6000;
       emp_salaries(102) := 5500;
       
       
        v_key := emp_salaries.FIRST;
    
        WHILE v_key IS NOT NULL LOOP
            DBMS_OUTPUT.PUT_LINE(v_key || ' → ' || emp_salaries(v_key));
            v_key := emp_salaries.NEXT(v_key);
        END LOOP; 
       END;
       
-- Example-5:   Storing table column data into array,  key : empno and value : Salary 

DECLARE
    
   TYPE emp_sal_tab IS TABLE OF emps.sal%TYPE
       INDEX BY PLS_INTEGER; 
    emp_salaries emp_sal_tab;  --  array declaration of type emps.sal
    
BEGIN
 FOR rec IN (SELECT empno, sal FROM emps) LOOP
      emp_salaries(rec.empno) := rec.sal * 1.1; -- give 10% raise
   END LOOP;
   DBMS_OUTPUT.PUT_LINE('Saved salaries in memory.'); 
END;

Assignment 1: Calculate Simple Interest

DECLARE
    p NUMBER := 10000;     -- Principal
    r NUMBER := 5;         -- Rate of interest
    t NUMBER := 2;         -- Time in years
    si NUMBER;             -- Simple interest
BEGIN
    si := (p * r * t) / 100;
    DBMS_OUTPUT.PUT_LINE('Simple Interest = ' || si);
END;

Output will appear as:

Simple Interest = 1000

Assignment 2: Employee Bonus Calculation

DECLARE
    emp_name VARCHAR2(50) := 'John';
    salary NUMBER := 60000;
    bonus NUMBER;
BEGIN
    IF salary > 50000 THEN
        bonus := 0.10 * salary;
    ELSE
        bonus := 0.15 * salary;
    END IF;

    DBMS_OUTPUT.PUT_LINE('Employee Name: ' || emp_name);
    DBMS_OUTPUT.PUT_LINE('Salary: ' || salary);
    DBMS_OUTPUT.PUT_LINE('Bonus: ' || bonus);
END;

Output will appear as:

Employee Name: John
Salary: 60000
Bonus: 6000

Assignment 3: Retrieve and Display Department Details

DECLARE
    v_dept DEPARTMENTS%ROWTYPE;
    v_dept_id DEPARTMENTS.DEPARTMENT_ID%TYPE := 10; -- Example Dept ID
BEGIN
    SELECT * INTO v_dept
    FROM DEPARTMENTS
    WHERE DEPARTMENT_ID = v_dept_id;

    DBMS_OUTPUT.PUT_LINE('Department Name: ' || v_dept.DEPARTMENT_NAME);
    DBMS_OUTPUT.PUT_LINE('Location ID: ' || v_dept.LOCATION_ID);
END;

Output will appear as:
Department Name: Administration
Location ID: 1700

Assignment 4: Student Marks Management

DECLARE
    TYPE marks_table IS TABLE OF NUMBER INDEX BY VARCHAR2(30);
    student_marks marks_table;
    total NUMBER := 0;
    avg_marks NUMBER;
    name VARCHAR2(30);
BEGIN
    -- Insert marks
    student_marks('Asha') := 90;
    student_marks('Rahul') := 85;
    student_marks('Sneha') := 88;
    student_marks('Kiran') := 92;
    student_marks('Vikram') := 80;

    name := student_marks.FIRST;
    WHILE name IS NOT NULL LOOP
        DBMS_OUTPUT.PUT_LINE('Student: ' || name || ' - Marks: ' || student_marks(name));
        total := total + student_marks(name);
        name := student_marks.NEXT(name);
    END LOOP;

    avg_marks := total / student_marks.COUNT;
    DBMS_OUTPUT.PUT_LINE('Total Marks: ' || total);
    DBMS_OUTPUT.PUT_LINE('Average Marks: ' || avg_marks);
END;


Output will appear as:
Student: Asha - Marks: 90

Total Marks: 435
Average Marks: 87

Assignment 5: Country–Capital Lookup

DECLARE
    TYPE country_capital_type IS TABLE OF VARCHAR2(50) INDEX BY VARCHAR2(50);
    country_capital country_capital_type;
    country_name VARCHAR2(50);
BEGIN
    -- Insert data
    country_capital('India') := 'New Delhi';
    country_capital('USA') := 'Washington D.C.';
    country_capital('France') := 'Paris';
    country_capital('Germany') := 'Berlin';
    country_capital('Japan') := 'Tokyo';
    country_capital('Australia') := 'Canberra';

    -- Ask for user input
    country_name := '&country_name';

    IF country_capital.EXISTS(country_name) THEN
        DBMS_OUTPUT.PUT_LINE('Capital of ' || country_name || ' is ' || country_capital(country_name));
    ELSE
        DBMS_OUTPUT.PUT_LINE('Country not found');
    END IF;
END;

 Output:

Enter value for country_name: India
Capital of India is New Delhi
